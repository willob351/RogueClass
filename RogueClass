# Project for CS2101  Willow O'Brien 18103210  Based off of the Dungeons & Dragons Rogue class
class Rogue:

  def __init__(self, name, level, alignment):
    self.name=name
    self.level = int(level)
    self.alignment=alignment

    self.sneakAttackDice=int(level/2) #sneak attack modifies attack power, and scales with level
    self.archetype=0

    import random
    def rollStat():
      #this is called if randomising character. ability stats are generated by rolling a 
      #six sided dice 4 times and taking sum of highest three
      rolls=[0,0,0,0]
      rolls[0] = random.randint(1,6)
      rolls[1]= random.randint(1,6)
      rolls[2]= random.randint(1,6)
      rolls[3]= random.randint(1,6)
      rolls.sort()
      stat=rolls[1]+rolls[2]+rolls[3]
      return(stat)

  #immediately asks user for input to initialise character ability stats
    print("Hello {}".format(self.name)+", tell me more...")
    #can generate random character
    randomise=input("randomise character? Y/N ")
    if randomise == "n" or randomise== "N" or randomise == "no" or randomise == "No" or randomise == "NO": #not random
      self.strength = int(input("Strength: "))
      self.dexterity = int(input("Dexterity: "))
      self.constitution=int(input("Constitution: "))
      self.intelligence = int(input("Intelligence: "))
      self.wisdom = int(input("Wisdom: "))
      self.charisma = int(input("Charisma: "))
  
    else: #random character
      reRoll=True
      #while loop allows for player to reroll stats if they're not happy
      while reRoll==True:
        print("\nRandom characters stats: ")
        self.strength = int(rollStat())
        self.dexterity = int(rollStat())
        self.constitution= int(rollStat())
        self.intelligence = int(rollStat())
        self.wisdom = int(rollStat())
        self.charisma = int(rollStat())
        print("\nStrength: {}".format(self.strength)+"\nDexterity: {}".format(self.dexterity)+"\nConstitution: {}".format(self.constitution)+"\nIntelligence: {}".format(self.intelligence)+"\nWisdom: {}".format(self.wisdom)+"\nCharisma: {}".format(self.charisma))
        #if player is happy with stats, reRoll = False and while loop ends
        statsOK=input("are these stats okay? Y/N ")
        if statsOK == "y" or statsOK=="Y" or statsOK=="Yes" or statsOK=="YES" or statsOK=="yes" :
          reRoll = False
        else:
          print("rerolling stats...\n")
          reRoll = True

  #setting up lists of ability stat values for use in loops
    abilityList = [self.strength,self.dexterity,self.constitution,self.intelligence,self.wisdom,self.charisma]
    modList=[]

  #calculates ability modifiers ( calculated by (score-10)/2, uses math.floor to round down odd numbers to integers)
    for ability in abilityList:
      import math
      mod=-5 
      # <1 and >30 set manually)
      if ability <=1:
        mod=-5
      elif ability >=30:
        mod=+10
      else:
        mod= (math.floor((ability-10)/2))
      modList.append(int(mod))

  #assigns modifiers from list created above, and  HP
    self.strMod=modList[0]
    self.dexMod=modList[1]
    self.conMod=modList[2]
    self.intMod=modList[3]
    self.wisMod=modList[4]
    self.charMod=modList[5]
    self.HPmax= (level*8)+self.conMod
    self.HP = self.HPmax
  #calculating HP using level and constitution modifier from above
    #self.HPmax= (level*8)+self.conMod
    #self.HP = self.HPmax
      
  #assigns proficiency bonus, which scales with level
    self.proficiencybonus=int(math.ceil(1+(self.level/4)))

  # numbers used for spellcasting 
    self.spellSave=8+self.proficiencybonus+self.intMod
    self.spellAttackMod = self.intMod+self.proficiencybonus


  #inventory with gold  silver and bronze as dictionaries for easier editing within list inventory
    self.inventory = [{"gold":14}, {"silver":12},{"bronze":0},"potion of healing", "leather armour","two daggers","shortsword", "thieves' tools","shortbow", "lockpicks"]
  
  #formats printing of player ability scores
    self.abilityScorePrint = "\nStrength: {}({})".format(self.strength,self.strMod)+"\nDexterity: {}({})".format(self.dexterity,self.dexMod)+"\nConstitution: {}({})".format(self.constitution,self.conMod)+"\nIntelligence: {}({})".format(self.intelligence,self.intMod)+"\nWisdom: {}({})".format(self.wisdom,self.wisMod)+"\nCharisma: {}({})".format(self.charisma,self.charMod)
  
  
  # this is to format printing of the player skills, languages and proficencies
    self.skills = """
    \nSkills & Proficiency Modifiers     Languages: Common, Theives' Cant
------------------------           Weapon Proficiency: simple weapons, dagger, shortshort, hand crossbow
+5  Acrobatics                     
-1  Animal Handling                
+2  Arcana
+0  Athletics
+4  Deception
+2  History
+1  Insight
+2  Intimidation
+2  Investigation
-1  Medicine
+2  Nature
-1  Perception
+2  Performance
+4  Persuasion
+2  Religion
+7  Sleight of Hand
+7  Stealth
-1  Survival"""


  #prints a sheet with all of the character's info, for user to easily refer back to
  def __repr__(self):
    CharacterSheet = ("\nCharacter Sheet:\n\nName: {}".format(self.name)+"\nClass: Lv.{} Rogue".format(self.level)+"\nHP: {}".format(self.HPmax)+"\nAlignment: {}".format(self.alignment)+
    "\n\nAbility Scores (+Modifiers)\n------------- {}".format(self.abilityScorePrint)+"\n\nInventory: {}".format(self.inventory) +"\nProficiency Bonus: +{}".format(self.proficiencybonus) + self.skills)
    return CharacterSheet

  # inventory management
  def addItem (self, item):
    self.inventory.append(item)

  #for getting paid
  def addMoney(self,quantity,quality="gold"):
    '''use to add money to your coiffers. quantity is amount of coins, quality = "gold" "silver" or "bronze".
    if quality isn't specified, it defaults to gold'''
    quality=str(quality)
    if quality == "gold" or quality == "Gold" or quality =="GOLD":
      self.inventory[0]["gold"]=(self.inventory[0]["gold"])+int(quantity)
    if quality == "silver" or quality == "Silver" or quality =="SILVER":
      self.inventory[1]["silver"]=(self.inventory[1]["silver"])+int(quantity)
    if quality == "bronze" or quality =="Bronze" or quality == "BRONZE":
      self.inventory[2]["bronze"]=(self.inventory[2]["bronze"])+int(quantity)

  #for blowing your money after you've been paid
  # uses abs() so quantity can be entered as a negative or a positive without error
  def loseMoney (self, quantity,quality):
    '''use to pay for things, or when you get pickpocketed. quantity is amount of coins, quality = "gold" "silver" or "bronze".
    if quality isn't specified, it defaults to gold'''
    quality=str(quality)
    if quality == "gold" or quality == "Gold" or quality =="GOLD":
      self.inventory[0]["gold"]=(self.inventory[0]["gold"])-abs(int(quantity))
    if quality == "silver" or quality == "Silver" or quality =="SILVER":
      self.inventory[1]["silver"]=(self.inventory[1]["silver"])-abs(int(quantity))
    if quality == "bronze" or quality =="Bronze" or quality == "BRONZE":
      self.inventory[2]["bronze"]=(self.inventory[2]["bronze"])-abs(int(quantity))


  # allows the player to roll several of the same kind of dice at once using random's randint method, and prints the result for each die.
  def rollDice(self,amount,d):
    '''Rolls a dice or two, or however many you need. 
    Eg. to roll 2 6-sixed dice, enter rollDice(2,6), to roll 3d10 rollDice(3,10) ect '''
    import random
    for i in range(amount):
      roll=random.randint(1,d)
      print("rolled a "+str(roll))

  # called during levelUp method for levels 4, 8, 10, 12, 16, and 19
  # changes ability score and updates correspoding modifier
  def abilityScoreImprov(self):
    import math
    improv=int(input("""You can increase one ability score of your choice by 2, or you can increase two Ability Scores of your choice by 1. 
  You canâ€™t increase an ability score above 20 using this feature.
    Choose first ability score to increase:
    1) Strength
    2) Dexterity
    3) Constitution
    4) Intelligence
    5) Wisdom
    6) Charisma
    Enter number between 1 and 6:  """))
    amount = int(input("\nincrease by 1 or 2?  "))
    if improv==1:
      self.strength=(self.strength)+amount
      print(("\nStrength is now {}").format(self.strength))
      self.strMod = (math.floor((self.strength-10)/2))
    elif improv ==2:
      self.dexterity=(self.dexterity)+amount
      print(("\nDexterity is now {}").format(self.dexterity))
      self.dexMod = (math.floor((self.dexterity-10)/2))
    elif improv == 3:
      self.constitution=(self.constitution)+amount
      print(("\nConstitution is now {}").format(self.constitution))
      self.conMod = (math.floor((self.constitution-10)/2))
    elif improv == 4:
      self.intelligence=(self.intelligence)+amount
      print(("\nIntelligence is now {}").format(self.intelligence))
      self.intMod = (math.floor((self.intelligence-10)/2))
    elif improv == 5:
      self.wisdom=(self.wisdom)+amount
      print(("\nWisdom is now {}").format(self.wisdom))
      self.wisMod = (math.floor((self.wisdom-10)/2))
    elif improv == 6:
      self.charisma=(self.charisma)+amount
      print(("\nCharisma is now {}").format(self.charisma))
      self.charMod = (math.floor((self.charisma-10)/2))
    
    if amount <2:
      improv2=int(input("""\nChoose next ability score to increase:
    1) Strength
    2) Dexterity
    3) Constitution
    4) Intelligence
    5) Wisdom
    6) Charisma
    Enter number between 1 and 6:  """))
      if improv2 ==1:
        self.strength=(self.strength)+1
        print(("\nStrength is now {}").format(self.strength))
        self.strMod = (math.floor((self.strength-10)/2))
      elif improv2 ==2:
        self.dexterity=(self.dexterity)+1
        print(("\nDexterity is now {}").format(self.dexterity))
        self.dexMod = (math.floor((self.dexterity-10)/2))
      elif impro2v == 3:
        self.constitution=(self.constitution)+1
        print(("\nConstitution is now {}").format(self.constitution))
        self.conMod = (math.floor((self.constitution-10)/2))
      elif improv2 == 4:
        self.intelligence=(self.intelligence)+1
        print(("\nIntelligence is now {}").format(self.intelligence))
        self.intMod = (math.floor((self.intelligence-10)/2))
      elif improv2 == 5:
        self.wisdom=(self.wisdom)+1
        print(("\nWisdom is now {}").format(self.wisdom))
        self.wisMod = (math.floor((self.Wisdom-10)/2))
      elif improv2 == 6:
        self.charisma=(self.charisma)+1
        print(("\nCharisma is now {}").format(self.charisma))
        self.charMod = (math.floor((self.Charisma-10)/2))


  # levelUp() allows player to level up their character.
  # this takes care of changing self.level, and any attributes that rely on level for their value (sneakAttackDice & proficiencyBonus).
  # it prints to user any new abilities gained
  def levelUp(self,newlevel):
    '''takes care of all the levelling up business. input your new level in brackets'''
    self.level=newlevel
    self.sneakAttackDice=int(newlevel/2)
    self.proficiencybonus=int(math.ceil(1+(self.level/4)))
    if newlevel == 1:
      print("""Level 1 \nExpertise: choose two of your skill Proficiencies, or one of your skill Proficiencies + proficiency with Thieves' Tools. Your Proficiency Bonus is doubled for any ability check you make that uses either of the chosen Proficiencies.
       Thieves' Cant: a mix of dialect, jargon, and code that allows you to hide messages in seemingly normal conversation. It takes four times longer to convey such a message than it does to speak plainly.
       In addition, you understand a set of Secret signs and symbols used to convey short, simple messages, such as the territory of a thieves' guild, if loot is nearby, if people in an area are easy marks or will provide a Safe House for thieves on the run.\n 
       Sneak Attack: Once per turn, you can deal an extra 1d6 damage to one creature you hit with an Attack if you have advantage on the Attack roll. The Attack must use a Finesse or ranged weapon. """)
    if newlevel == 2:
      print("Level 2 \nCunning Action: You can take a Bonus Action on each of your turns in Combat. This action can be used only to Dash, Disengage, or Hide.")
    if newlevel == 3:
      print("Level 3 \nRoguish Archetype: you choose an archetype that you emulate in the exercise of your rogue Abilities ")
      archetypeChoice = int(input("choose wisely: 1) Thief, 2) Arcane Trickster, 3) Assassin  1/2/3?"))
      if archetypeChoice ==1:
        self.archetype = "Thief"
        print("""Fast Hands: you can use the Bonus Action granted by your Cunning Action to make a Dexterity (Sleight of Hand) check, use your thievesâ€™ tools to disarm a trap or open a lock, or take the Use an Object action.
        Second Storey Work: you gain the ability to climb faster than normal; climbing no longer costs you extra Movement. \nIn addition, when you make a running jump, the distance you cover increases by a number of feet equal to your Dexterity modifier.""")
      elif archetypeChoice ==2:
        self.archetype= "Arcane Trickster"
        print("""Some rogues enhance their fine-honed skills of stealth and agility with magic, learning tricks of enchantment and illusion. You have decided to augment your martial prowess with the ability to cast spells.
        use the showSpells() method to view the spells and cantrips you can cast""")
        print("""\nLegederman: when you cast Mage Hand, you can make the spectral hand invisible, and you can perform the following additional tasks with it:
        You can stow one object the hand is holding in a container worn or carried by another creature.
        You can retrieve an object in a container worn or carried by another creature.
        You can use thieves' tools to pick locks and disarm traps at range.
        You can perform one of these tasks without being noticed by a creature if you succeed on a Dexterity (Sleight of Hand) check contested by the creature's Wisdom (Perception) check.
        
        In addition, you can use the bonus action granted by your Cunning Action to control the hand.""")
      elif archetypeChoice == 3:
        self.archetype = "Assassin"
        print("You focus your training on the grim art of death. Those who adhere to this archetype are diverse: hired killers, spies, bounty hunters, and even specially anointed priests trained to exterminate the enemies of their deity. Stealth, poison, and disguise help you eliminate your foes with deadly efficiency.")
        print("""You gain proficiency when using disguise kit and the poisoner's kit.
        Assassinate: you are at your deadliest when you get the drop on your enemies. You have advantage on attack rolls against any creature that hasn't taken a turn in the combat yet. In addition, any hit you score against a creature that is surprised is a critical hit.""")
    if newlevel == 4:
      print("Level 4: \n")
      self.abilityScoreImprov()
    if newlevel == 5:
      print("Level 5: \nUncanny Dodge: when an attacker that you can see hits you with an Attack, you can use your Reaction to halve the attack's damage against you.")
    if newlevel == 6:
      print("Level 6: Expertise: choose two more of your skills for Proficiency bonus to be doubled.")
    if newlevel == 7:
      print("Level 7: \nEvasion: you can nimbly dodge out of the way of certain area Effects, such as a red dragon's fiery breath or an Ice Storm spell. When you are subjected to an Effect that allows you to make a Dexterity saving throw to take only half damage, you instead take no damage if you succeed on the saving throw, and only half damage if you fail.")
    if newlevel == 8: 
      print("Level 8: \n")
      self.abilityScoreImprov()
    if newlevel == 9:
      print("Level 9: Roguish Archetype\n ")
      if self.archetype == "Thief":
        print("""Supreme Sneak: you now have advantage on a Dexterity (Stealth) check if you move no more than half your speed on the same turn.""")
      if self.archetype == "Assassin":
        print("""Infiltration: you can unfailingly create false identities for yourself. You must spend seven days and 25 gp to establish the history, profession, and affiliations for an identity. You can't establish an identity that belongs to someone else. For example, you might acquire appropriate clothing, letters of introduction, and official- looking certification to establish yourself as a member of a trading house from a remote city so you can insinuate yourself into the company of other wealthy merchants.
        Thereafter, if you adopt the new identity as a disguise, other creatures believe you to be that person until given an obvious reason not to.""")
      if self.archetype== "Arcane Trickster":
        print("Magical Ambush: if you are hidden from a creature when you cast a spell on it, the creature has disadvantage on any saving throw it makes against the spell this turn.")
    if newlevel == 10:
      print("Level 10: \n")
      self.abilityScoreImprov()
    if newlevel == 11:
      print("Level 11: \nReliable Talent: you have refined your chosen Skills until they approach perfection. Whenever you make an ability check that lets you add your Proficiency Bonus, you can treat a d20 roll of 9 or lower as a 10.")
    if newlevel == 12:
      print("Level 12: \n")
      self.abilityScoreImprov()
    if newlevel == 13:
      print("Level 13: Roguish Archetype\n")
      if self.archetype=="Thief":
        print("""By now you have learned enough about the workings of magic that you can improvise the use of items even when they are not intended for you. You ignore all class, race, and level requirements on the use of Magic Items.""")
      if self.archetype == "Assassin":
        print("""Imposter: you gain the ability to unerringly mimic another person's speech, writing, and behavior. You must spend at least three hours studying these three components of the person's behavior, listening to speech, examining handwriting, and observing mannerisms.
        Your ruse is indiscernible to the casual observer. If a wary creature suspects something is amiss, you have advantage on any Charisma (Deception) check you make to avoid detection.""")
      if self.archetype== "Arcane Trickster":
        print("Versatile Trickster:you gain the ability to distract targets with your Mage Hand. As a bonus action on your turn, you can designate a creature within 5 feet of the spectral hand created by the spell. Doing so gives you advantage on attack rolls against that creature until the end of the turn.")    
    if newlevel == 14:
      print("Level 14: \nBlindsense: if you are able to hear, you are aware of the location of any hidden or Invisible creature within 10 feet of you.")
    if newlevel == 15:
      print("Level 15: \nSlippery Mind: You gain proficiency in Wisdom Saving Throws. ")
      #this gained proficiency  is taken care of in the savingThrows() method
    if newlevel == 16:
      print("Level 16: \n")
      self.abilityScoreImprov()
    if newlevel == 17:
      print("Level 17: Roguish Archetype\n")
      if self.archetype == "Thief":
        print("""Thief's Reflexes: you have become adept at laying ambushes and quickly escaping danger. You can take two turns during the first round of any Combat. You take your first turn at your normal Initiative and your second turn at your Initiative minus 10. You canâ€™t use this feature when you are surprised.""")
      if self.archetype == "Assassin":
        print("""You have become a master of instant death. When you attack and hit a creature that is surprised, it must make a Constitution saving throw (DC 8 + your Dexterity modifier + your proficiency bonus). On a failed save, double the damage of your attack against the creature.""")
      if self.archetype== "Arcane Trickster":
        print("""Spell Thief: you gain the ability to magically steal the knowledge of how to cast a spell from another spellcaster.
        Immediately after a creature casts a spell that targets you or includes you in its area of effect, you can use your reaction to force the creature to make a saving throw with its spellcasting ability modifier. The DC equals your spell save DC. 
        On a failed save, you negate the spell's effect against you, and you steal the knowledge of the spell if it is at least 1st level and of a level you can cast (it doesn't need to be a wizard spell). 
        For the next 8 hours, you know the spell and can cast it . The creature can't cast that spell until the 8 hours have passed.
        
        Once you use this feature, you can't use it again until you finish a long rest.""")    
    if newlevel == 18:
      print("Level 18: \nElusive: you are so evasive that attackers rarely gain the upper hand against you. No Attack roll has advantage against you while you aren't Incapacitated.")
    if newlevel == 19:
      print("Level 19: \n")
      self.abilityScoreImprov()
    if newlevel == 20:
      print("""Level 20: \nStroke of Luck: At 20th level, you have an uncanny knack for succeeding when you need to. If your Attack misses a target within range, you can turn the miss into a hit. Alternatively, if you fail an ability check, you can treat The D20 roll as a 20. Once you use this feature, you can't use it again until you finish a short or Long Rest.""")



  ###   below are methods used for combat  ###
  #uses random's randint to roll dice, variable roll is to check if the hit lands or misses, and variable damage is to calculate damage if the hit landed
  #damage takes into account any proficency or if sneak attack is being used this turn

  #attack with shortsword
  def shortsword(self,sneak=False):
    '''rolls to hit and damage, taking proficiency + modifers into account
    set sneak=True for Sneak Attack'''
    import random
    roll=random.randint(1,20)
    damage=random.randint(1,6)+self.proficiencybonus
    if sneak == True:
      sneak = random.randint(1,6)*self.sneakAttackDice
      damage=damage+sneak
      print("using sneak attack...") 
    toHit = input("You rolled "+str(roll)+" to hit, did it land? Y/N? ")
    if toHit == "y" or toHit =="Y":
      print("You did "+ str(damage) +" piercing damage")
    else:
      print("nevermind then")

  #attack with bow
  def bow(self,sneak=False):
    '''rolls to hit and damage, taking modifers into account
    set sneak=True for Sneak Attack'''
    import random
    roll=random.randint(1,20)
    damage=random.randint(1,6)
    if sneak == True:
      sneak = random.randint(1,6)*self.sneakAttackDice
      damage=damage+sneak
      print("using sneak attack...")    
    toHit = input("You rolled "+str(roll)+" to hit, did it land? Y/N? ")
    if toHit == "y" or toHit =="Y":
      print("You did "+ str(damage) +" piercing damage")
    else:
      print("maybe next time")

  #attack with dagger
  def dagger(self,sneak=False):
    '''rolls to hit and damage, taking proficiency + modifers into account
    set sneak=True for Sneak Attack'''
    import random
    roll=random.randint(1,20)
    damage=2(random.randint(1,4))+self.proficiencybonus
    if sneak == True:
      sneak = random.randint(1,6)*self.sneakAttackDice
      damage=damage+sneak
      print("using sneak attack..")    
    toHit = input("You rolled "+str(roll)+" to hit, did it land? Y/N? ")
    if toHit == "y" or toHit =="Y":
      print("You did "+ str(damage) +" piercing damage")
    else:
      print("well then")


  def spellList(self): # shows user their spells, taking into account character level
    print("""
    Cantrips: Mage Hand, Prestidigation, Booming Blade
    lvl 1 spells: Charm Person, Sleep""", end =" ")
    if (self.level>=5):
      print(", Silent Image, Disguise Self")
    if (self.level>=7):
      print("lvl 2 spells: Invisibility, Crown of Madness, Phantasmal Force")
    if (self.level>=13):
      print("lvl 3 spells: Hypnotic Pattern, Fear, Major Image")
    if (self.level>=19):
      print("lvl 4 spells: Stone Shape, Greater Invisibility")

  # these just call from the Spells class. I have them like  this to make it easier for the user
  # and because if this were a full program then the Spells class would have extra spells 
  # that the Rogue character can't use

  def boomingBlade(self):
    prof = self.proficiencybonus
    lvl = self.level
    Spells.boomingBlade(self,prof,lvl)
  
  def crownOfMadness(self):
    save = self.spellSave
    Spells.crownOfMadness(self,save)

  def phantasmalForce(self):
    save = self.spellSave
    Spells.phantasmalForce(self,save)
    
  

  #checks if current HP is lower than the maxHP, and if it is, it allows the player to heal their character, up to HPmax
  def healing(self,healPoints):
    '''modifies HP when you are healed. healPoints should be a positive whole number'''
    if self.HP < self.HPmax:
      self.HP = self.HP+healPoints
    print("Your HP is now {}".format(self.HP))

  #updates current HP to reflect damage taken, and prints to user their HP
  def damage(self, damagePoints):
    '''modifies HP when you take damage. damagePoints should be a positive whole number '''
    self.HP=self.HP - damagePoints
    print("Your HP is now {}".format(self.HP))


  #used for saving throws or ability checks.
  #uses random's randint to roll 20-sided dice, taking in account modifiers and proficiencies.
  #from level 15 also includes a proficiency bonus on Wisdom due to Slippery Mind ability gained from levelling up
  def savingThrow(self,check):
    '''check should be input as three letter string: "Str", "Dex", "Con", "Int", "Wis", "Cha"
      to make a corresponding saving throw or ability/skill check. Includes modifiers & proficiency bonus'''
    import random
    self.check=check
    if check == "Str":
      throw = (random.randint(1,20))+self.strMod
    if check == "Dex":
      throw = (random.randint(1,20))+ self.dexMod + self.proficiencybonus #prof bonus applied automatically becuase of rogue class
    if check == "Con":
      throw = (random.randint(1,20))+self.conMod
    if check == "Int": 
      throw = (random.randint(1,20))+self.intMod + self.proficiencybonus #automatic bonus here too bc of class
    if check == "Wis":
      throw = (random.randint(1,20))+self.wisMod 
      if self.level >=15:
        throw=throw+self.proficiencybonus
        print("Thanks to Slippery Mind, your score is improved (+ proficiency bonus)")
    if check == "Cha":
      throw = (random.randint(1,20))+self.chaMod
    print("You roll "+str(throw))
